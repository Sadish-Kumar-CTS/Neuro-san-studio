# This action script will take a merge to main and build
# the neuro-san-studio docker image and push it to our ECR.
# It will then update the manifest file with the new tag
# which then will get picked up by our Argo CD system and 
# deploy it to the dev environment.
# In the case of a github Release event, the similar flow
# occurs, but in this case, the staging environment is updated.
# This script does not automatically push anything to production;
# that case is handled manually.
# Note, this script only updates the neuro-san-studio image, while
# the deploy also uses a custom ui image; that process is still 
# manual as the custom ui build is a manual process and not 
# run frequently.

name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-and-push:
    if: github.repository == 'Sadish-Kumar-CTS/Neuro-san-studio'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-vars.outputs.image_tag }}
      target_environment: ${{ steps.set-vars.outputs.target_environment }}

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up variables
        id: set-vars
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "image_tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "target_environment=staging" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            echo "image_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "target_environment=dev" >> $GITHUB_OUTPUT
          fi
      - name: Fetch usage_logger from Repo B
        run: |
          rm -rf usage_logger
          git clone --depth 1 -b main https://${{ secrets.PAT_TOKEN }}@github.com/Sadish-Kumar-CTS/usage_logger.git /tmp/repo-b
          cp -r /tmp/repo-b/usage_logger ./usage_logger
          rm -rf /tmp/repo-b
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          tags: 876092575456.dkr.ecr.us-west-2.amazonaws.com/neurosan_cognizant_sso:${{ steps.set-vars.outputs.image_tag }}

  update-k8s-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update image tag in kustomization.yaml
        run: |
          sed -i "s|newTag: .*|newTag: ${{ needs.build-and-push.outputs.image_tag }}|" k8s/kustomization.yaml

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add k8s/kustomization.yaml
          git commit -m "Update image tag to ${{ needs.build-and-push.outputs.image_tag }}" || exit 0
          git push
